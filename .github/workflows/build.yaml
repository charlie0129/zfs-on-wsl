name: Build Latest Kernel with ZFS Support

on:
  workflow_dispatch: {}

env:
  KERNELNAME: "microsoft-zfs"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get the Latest Kernel Version
        run: |
          VER=$(curl -s https://www.kernel.org/ | grep -A1 'stable:' | grep -oP '(?<=strong>).*(?=</strong.*)')
          echo "Latest Kernel: $VER"
          echo "KERNELVER=$VER" >> $GITHUB_ENV

      - name: Get the Latest ZFS Version
        run: |
          VER=$(curl -s https://api.github.com/repos/openzfs/zfs/releases/latest | jq '.tag_name' --raw-output | grep -oP '\d+\.\d+\.\d+')
          echo "Latest ZFS: $VER"
          echo "ZFSVER=$VER" >> $GITHUB_ENV

      - name: Install Build Dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y tzdata
          sudo apt-get install -y \
            alien \
            autoconf \
            automake \
            bc \
            binutils \
            bison \
            build-essential \
            curl \
            dkms \
            fakeroot \
            flex \
            gawk \
            libaio-dev \
            libattr1-dev \
            libblkid-dev \
            libelf-dev \
            libffi-dev \
            libssl-dev \
            libtool \
            libudev-dev \
            python3 \
            python3-cffi \
            python3-dev \
            python3-setuptools \
            uuid-dev \
            wget \
            zlib1g-dev

      - name: Create temp Build Directory
        run: |
          if [[ -d "/tmp/kbuild" ]]; then rm -rf /tmp/kbuild; fi
          mkdir /tmp/kbuild
      
      - name: Download and Extract Kernel Source
        run: |
          wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${KERNELVER}.tar.xz -O /tmp/kbuild/kernel.tar.xz
          tar -xf /tmp/kbuild/kernel.tar.xz -C /tmp/kbuild
          # Move our kernel directory to reflect our custom name
          mv -fv /tmp/kbuild/linux-${KERNELVER} /usr/src/linux-${KERNELVER}-${KERNELNAME}

      - name: Download and Extract ZFS Source
        run: |
          wget https://github.com/openzfs/zfs/releases/download/zfs-${ZFSVER}/zfs-${ZFSVER}.tar.gz -O /tmp/kbuild/zfs.tar.gz
          tar -xf /tmp/kbuild/zfs.tar.gz -C /tmp/kbuild
          # Move our ZFS directory to reflect our custom name
          mv -fv /tmp/kbuild/zfs-${ZFSVER} /usr/src/zfs-${ZFSVER}-for-linux-${KERNELVER}-${KERNELNAME}

      - name: Configure Kernel
        run: |
          # Add the WSL2 kernel config from upstream into our extracted kernel directory
          wget https://raw.githubusercontent.com/microsoft/WSL2-Linux-Kernel/master/Microsoft/config-wsl -O /usr/src/linux-${KERNELVER}-${KERNELNAME}/.config

          # Use our custom localversion so we can tell when we've actually successfully installed one of our custom kernels
          sed -i 's/^CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION="-${KERNELNAME}"/g' /usr/src/linux-${KERNELVER}-${KERNELNAME}/.config

          # Enter the kernel directory
          cd /usr/src/linux-${KERNELVER}-${KERNELNAME}

          # Update our .config file by accepting the defaults for any new kernel
          # config options added to the kernel since the Microsoft config was
          # generated.
          make olddefconfig

          # Check and resolve any dependencies needed before building the kernel
          make prepare

      - name: Configure ZFS
        run: |
          # Enter the ZFS module directory
          cd /usr/src/zfs-${ZFSVER}-for-linux-${KERNELVER}-${KERNELNAME}

          # Run OpenZFS autogen.sh script
          ./autogen.sh

          # Configure the OpenZFS modules
          # See: https://openzfs.github.io/openzfs-docs/Developer%20Resources/opt/kbuilding%20ZFS.html
          ./configure --prefix=/ --libdir=/lib --includedir=/usr/include --datarootdir=/usr/share --enable-linux-builtin=yes --with-linux=/usr/src/linux-${KERNELVER}-${KERNELNAME} --with-linux-obj=/usr/src/linux-${KERNELVER}-${KERNELNAME}

          # Run the copy-builtin script
          ./copy-builtin /usr/src/linux-${KERNELVER}-${KERNELNAME}

      - name: Build ZFS
        run: |
          cd /usr/src/zfs-${ZFSVER}-for-linux-${KERNELVER}-${KERNELNAME}
          make -j$(nproc)
          sudo make install

      - name: Build Kernel
        run: |
          cd /usr/src/linux-${KERNELVER}-${KERNELNAME}

          # Make sure that we're going to build ZFS support when we build our kernel
          sed -i '/.*CONFIG_ZFS.*/d' /usr/src/linux-${KERNELVER}-${KERNELNAME}/.config
          echo "CONFIG_ZFS=y" >> /usr/src/linux-${KERNELVER}-${KERNELNAME}/.config

          # Build our kernel and install the modules into /lib/modules!
          make -j$(nproc)

      - name: Upload bzImage
        uses: actions/upload-artifact@v3
        with:
          name: bzImage-${{ env.KERNELVER }}-${{ env.KERNELNAME }}
          path: /usr/src/linux-${{ env.KERNELVER }}-${{ env.KERNELNAME }}/arch/x86/boot/bzImage

      - name: Archive Kernel
        run: |
          cd /usr/src
          tar cf linux-${KERNELVER}-${KERNELNAME}.tar linux-${KERNELVER}-${KERNELNAME}

      - name: Upload Kernel Tarball
        uses: actions/upload-artifact@v3
        with:
          name: linux-${{ env.KERNELVER }}-${{ env.KERNELNAME }}.tar
          path: /usr/src/linux-${{ env.KERNELVER }}-${{ env.KERNELNAME }}.tar

      - name: Archive ZFS
        run: |
          cd /usr/src
          tar cf zfs-${ZFSVER}-for-${KERNELVER}-${KERNELNAME}.tar zfs-${ZFSVER}-for-linux-${KERNELVER}-${KERNELNAME}

      - name: Upload ZFS Tarball
        uses: actions/upload-artifact@v3
        with:
          name: zfs-${{ env.ZFSVER }}-for-${{ env.KERNELVER }}-${{ env.KERNELNAME }}.tar
          path: /usr/src/zfs-${{ env.ZFSVER }}-for-${{ env.KERNELVER }}-${{ env.KERNELNAME }}.tar